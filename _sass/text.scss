@mixin text {
	text-align: justify;
	hyphens: manual;
	@supports (hyphens: auto) {
		hyphens: auto;
	}
	
	i {
		font-style: italic;
	}
	
	$lang-quotes: (
		es: "\0000AB" "\0000BB",
		en: "\00201C" "\00201D" "\002018" "\002019",
		de: "\00201E" "\00201C"
	);
	@if variable-exists(lang) {
		q {
			@if map-has-key($lang-quotes, $lang) {
				quotes: map-get($lang-quotes, $lang);
				&::before {
					content: open-quote;
				}
				&::after {
					content: close-quote;
				}
			} @else {
				quotes: none;
			}
		}
	} @else {
		@each $lang, $quotes in $lang-quotes {
			*:lang(#{$lang}) > q {
				quotes: map-get($lang-quotes, $lang);
				&::before {
					content: open-quote;
				}
				&::after {
					content: close-quote;
				}
			}
		}
	}
	
	cite {
		font-style: italic;
	}
	
	.sentsides > .sentside + .sentside::before {
		/* Use em units to set the dash with margins proportional to the font size of the surrounding text */
		margin-left: .4em;
		margin-right: .4em;
		/* We could also draw the dash ourselves so as to avoid differences between fonts */
		content: "\002014";
	}
	
	.ili {
		&::before {
			content: "\0000A0\0000A0\0025CF\0000A0";
			font-size: 0.8em;
		}
		
		@if variable-exists(lang) {
			&:nth-last-child(n+3)::after {
				@if ( $lang == 'de' ) {
					content: ";";
				} @else {
					content: ",";
				}
			}
			
			&:nth-last-child(2)::after {
				content: map-get(
						(
							es: ", y",
							en: ", and",
							de: "; und"
						),
						$lang
					);
			}
		} @else {
			&:nth-last-child(n+3)::after {
				content: ",";
			}
			&:lang(de):nth-last-child(n+3)::after {
				content: ";";
			}
			
			&:lang(es):nth-last-child(2)::after {
				content: ", y";
			}
			&:lang(en):nth-last-child(2)::after {
				content: ", and";
			}
			&:lang(de):nth-last-child(2)::after {
				content: "; und";
			}
		}
	}
	
	p.continuation::before {
		content: "\0000BB";
		margin-right: .5em;
	}
}
